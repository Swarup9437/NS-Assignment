1. Input,Output and Exceptions(In class) - Cuboid Perimeter

static int Perimeter(int L, int B, int H){
//Enter your code here
return 4*(L+B+H);
}

2. If statement, Loops and Code flow(In class assignment) - If- Leap year

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		if (N%4 ==0){
			if (N%100 ==0 && N%400 !=0){
				System.out.print("NO");
			}else{
				System.out.print("YES");
			}
		}else{
			System.out.print("NO");
		}
	}
}

3. Functions(In class) - Help Sherlock

static int Help(int N, int M){
//Enter your code here
if (N%M==0) return 1;
else return 0;
}

4. Functions(In class) - Penny and Charity

static int Charity(int N, int M){
//Enter your code here
if (M/N >  1) return M/N;
else return -1;
}

5. 1D Arrays (In Class) - Buildings

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
        Scanner sc = new Scanner (System.in);
        int size = sc.nextInt();
        int [] arr = new int[size]; 
        for(int i = 0 ; i < size; i++){
            arr[i] = sc.nextInt();
        }
        int count = 1;
        int idx = 0;
        for (int i = 1; i < size ; i++){
            if (arr[i] > arr[idx]) {
                count++;
                idx = i;
            }
        }
        System.out.print(count);
	}
}

6. 1D Arrays (In Class) - Max numbers

/*
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework
// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while(T>0){
            int size = sc.nextInt();
            int [] arr = new int [size];
            for(int i=0; i < size; i++){
                arr[i] = sc.nextInt();
            }
            Arrays.sort(arr);
            for (int i = 0; i < 3; i++){
                System.out.print(arr[size-1-i]+" ");
            }
            System.out.println();
            T--;
        }
    }
}
*/


import java.util.Scanner; // contains Collections framework
// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        int size,i,first,second,third;
        int [] arr;
        
        while(T>0){
            size = sc.nextInt();
            arr = new int [size];
            for(i = 0; i < size; i++){
                arr[i] = sc.nextInt();
            }
            first = arr[0];
            second = 0;
            third = 0;
            for(i=1; i < size; i++){
                if (arr[i] >= first){
                    third = second;
                    second = first;
                    first = arr[i];
                }
                else if (arr[i] >= second){
                    third = second;
                    second = arr[i];
                }
                else if (arr[i] > third){
                    third = arr[i];
                }
            }
            System.out.println(first+" "+second+" "+third);
        T--;
        }
    }
}


7. 1-D Arrays ( Post class) - Simple Arrangement

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int [] arr = new int [size];
        for(int i = 0; i <size;i++){
            arr[i] = sc.nextInt();
        }

        for(int i =0; i < size; i++){
            System.out.print(arr[arr[i]]+" ");
        }
    }
}


// // Method 2:
//         int [] arr2 = new int [size];
//         for(int i = 0; i <size;i++){
//             arr2[i] = arr[arr[i]];
//         }
//         for(int x: arr2) System.out.print(x+" ");
//     }
// }

8. 1-D Arrays ( Post class) - Average me

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
        Scanner sc = new Scanner (System.in);
        int n = sc.nextInt();
        int [] arr = new int [n];
        for (int i = 0; i < n; i++){
            arr[i] = sc.nextInt();
        }
        long sum = 0;
        for (int i = 0; i < n; i++){
            sum += arr[i];
        }
        long avg = sum/n;
        System.out.print(avg); 
	}
}


9. Sorting - Inclass - Implementing Insertion sort

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
        Scanner sc = new Scanner (System.in);
        int T = sc.nextInt();
        while (T > 0){
            int size = sc.nextInt();
            int [] arr = new int [size];
            for (int i = 0; i < size; i++){
                arr[i] = sc.nextInt();
            }
            insertionSort(arr, size);
            for(int x: arr) System.out.print(x+" ");
            System.out.println();

            T--;
        }
	}
    public static void insertionSort(int [] arr, int n){
        for (int i = 1; i < n; i++){
            int current = arr[i];
            int j = i-1;
            while(j >= 0 && current < arr[j]){
                arr[j+1] = arr[j];
                j--;
            }
            arr[j+1] = current; 
        }
    }
}

10. Sorting - Inclass - Implementing Bubble Sort

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner (System.in);
		int T = sc.nextInt();
		while (T > 0){
			int size = sc.nextInt();
			int [] arr = new int [size];
			for (int i = 0; i < size; i++){
				arr[i] = sc.nextInt();
			}
			//
			bubbleSort(arr, size);
			for (int x: arr) System.out.print(x+" ");
			System.out.println(); 
			T--;
		}
	}
	public static void bubbleSort(int[] arr, int n){
		for (int i = 0; i < n-1; i++){
			for (int j = 0; j < n-1-i; j++){
				if (arr[j] > arr[j+1]) swap(arr, j, j+1);
			}
		}
	}
	public static void swap(int [] arr, int x, int y){
		int temp = arr[x];
		arr[x] = arr[y];
		arr[y] = temp;
	}
}

11. Sorting - (Inclass) - Implementing Selection Sort

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner (System.in);
		int T = sc.nextInt();
		while(T > 0){
			int size = sc.nextInt();
			int [] arr = new int [size];
			for (int i = 0; i < size; i++){
				arr[i] = sc.nextInt();
			}
			selectionSort(arr, size);
			for (int x: arr) System.out.print(x+" ");
			System.out.println();
			T--;
		}
	}
	public static void selectionSort(int [] arr, int n){		
		for (int i = 0; i < n-1; i++){		
			int smallest = i;					
			for(int j = i+1; j < n; j++){
				if (arr[j] < arr[smallest]) smallest = j;
			}
			swap (arr, i, smallest);
		}
	}
	public static void swap(int [] arr, int x, int y){
		int temp = arr[x];
		arr[x]= arr[y];
		arr[y] = temp;
	}
}

12. Sorting ( Post class ) - Bubble Sort (descending order)

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner (System.in);
		int size = sc.nextInt();
		int [] arr = new int [size];
		for (int i = 0; i < size; i++){
			arr[i] = sc.nextInt();
		}
		//
		bubbleSort(arr, size);
		for (int x: arr) System.out.print(x+" ");
	}
	public static void bubbleSort(int [] arr, int n){
		for (int i = 0; i < n-1; i++){
			for (int j = 0; j < n-1-i; j++){
				if(arr[j] < arr[j+1]) swap (arr, j, j+1);
			}
		}
	}
	public static void swap(int [] arr, int x, int y){
		int temp = arr[x];
		arr[x] = arr[y]; 
		arr[y] = temp;
	}
}

13. Advanced Sorting ( Post class) - Sort 0's 1's and 2's

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T > 0) {
            int n = sc.nextInt();
            int [] arr = new int [n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            int low = 0;
            int high = n-1;
            int i = 0;
            while (i <= high) {
                if (arr[i] == 0) swap (arr, i++, low++);
                else if (arr[i] == 1) i++;
                else swap(arr, i, high--);
            }
            for (int x: arr) System.out.print(x+" ");
            System.out.println();
            T--;
        }
	}
    public static void swap (int [] arr, int x, int y) {
        int temp = arr[x];
        arr[x] = arr[y];
        arr[y] = temp;
    }
}

14. Advanced Sorting ( In class) - Implementing Quick Sort

/*
// Information about the arguments given in function
arr[]: input array
start: starting index of array
end: ending index of array
*/
public static int[] quickSort(int arr[], int start, int end)
{
       // Your code here
      // You can create your own helper function
      if (start < end){
          int pivotIdx = pivot(arr, start, end);
          quickSort(arr, start, pivotIdx-1);
          quickSort(arr, pivotIdx+1, end);
      }
      return arr;
}
public static int pivot(int arr[], int start, int end){
    int pivotElement = arr[end];
    int j = start-1;
    for (int i = start; i < end; i++){
        if(arr[i] <= pivotElement){
            j++;
            swap(arr, i, j);
        }
    }
    j++;
    swap(arr, j, end);
    return j;
}
public static void swap(int [] arr, int x, int y){
    int temp = arr[x];
    arr[x] = arr[y];
    arr[y] = temp;
}

15. Advanced Sorting II ( In class ) - Implementing Merge Sort

public static int[] implementMergeSort(int arr[], int start, int end)
    {
        // Your code here
       // You can have your own function where you will use 
      // start and end position for divide purpose 
      if (start < end){
        int mid = start+(end-start)/2;
        implementMergeSort(arr, start, mid);
        implementMergeSort(arr, mid+1, end);
        conqure(arr, start, mid, end);
      }
      return arr;
    }
    public static void conqure(int [] arr, int start, int mid, int end){
      int idx1 = start;
      int idx2 = mid+1;
      int x = 0;
      int [] merged = new int [end-start+1];
      while(idx1 <= mid && idx2 <= end){
        if(arr[idx1] <= arr[idx2]) merged[x++] = arr[idx1++];
        else merged[x++] = arr[idx2++];
      }
      while (idx1 <= mid) merged[x++] = arr[idx1++];
      while (idx2 <= end) merged[x++] = arr[idx2++];
      for (int y: merged) arr[start++] = y;
    }


16. Advanced Sorting II ( Post class ) - Shopping

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		// k items to buy, out of N items having price as Pi;
		// Planned to buy the chepest K no of cheapest item;
		// So Sort the items as per there peice list;
		// Since he will not buy the first two item;
		// So add the price of k no of item starting from index 2;

		// Taking Data

		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int K = sc.nextInt();
		int [] priceList = new int[N];
		for(int i = 0; i < N; i++){
			priceList[i] = sc.nextInt();
		}
		long totalCost = 0; 

// Method -- >1		// Using array method		

		// Arrangging the items as per their price
		Arrays.sort(priceList);
		for (int i = 2; i < K+2; i++) totalCost += priceList[i];
		System.out.print(totalCost);
	}
// Method -- >2
	// Apply MS/QS of the sorting technique irrespective of using Arrays method 
}

17. Search Algorithms ( In class ) - Searching an element in a sorted array

static int isPresent(long arr[], int n, long k)
{
	    // Your code here
		int low = 0;
		int high = n-1;
		while (low <= high){
			int mid = low+(high-low)/2;
			if (arr[mid] == k) return 1;
			else if (arr[mid] > k) high = mid-1;
			else low = mid+1;
		}
		return -1;
}

18. Search Algorithms ( In class ) - Minimum Element in Sorted and Rotated Array

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner (System.in);
		int T = sc.nextInt();
		while (T > 0){
			int size = sc.nextInt();
			int [] arr = new int[size];
			for (int i = 0; i < size; i++){
				arr[i] = sc.nextInt();
			}
			//
			System.out.println(minElement(arr,size));
			T--;
		}
	}
	public static int minElement(int [] arr, int n){
		if (n == 0) return -1;
		if (n == 1) return arr[0];
		int low = 0; 
		int high = n-1;
		while (low <= high){
			int mid = low+(high-low)/2;
			if (mid > 0 && arr[mid-1] > arr[mid]) return arr[mid];
			else if(arr[low] <= arr[mid] && arr[mid] > arr[high]) low = mid+1;
			else high = mid-1;
		}
		return arr[low]; 
	}
}

19. Search Algorithms ( Post class ) - Square Root Of an Integer

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner(System.in);
		long T = sc.nextInt();
		while(T > 0){
			long n = sc.nextInt();
			System.out.println(floor(n));
			T--;
		}
	}
	public static long floor(long num){
		long low = 0;
		long high = num;
		long result = 0;
		while (low <= high){
			long mid = low+(high-low)/2;
			if(mid*mid == num) return mid;
			else if(mid*mid < num) {
				result = mid;
				low = mid+1;
			}
			else high = mid-1;
		}
		return result;
	}
}

20. Search Algorithms II ( Post class ) - Shipping Parcels

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner (System.in);
		int T = sc.nextInt();
		while (T > 0) {
			int n = sc.nextInt();
			int D = sc.nextInt();
			int [] arr = new int [n];
			int minWeight = 0;
			int maxWeight = 0;
			for (int i = 0; i < n; i++){
				arr[i] = sc.nextInt();
				maxWeight += arr[i];
				if (arr[i] > minWeight) minWeight = arr[i];
			}
			int capacity = 0;
			while (minWeight <= maxWeight){
				int mid = minWeight+ (maxWeight-minWeight)/2;
				if (optimize(arr,n,mid,D)) {
					capacity = mid;
					maxWeight = mid-1;
				}
				else minWeight = mid+1;
			}
			System.out.println(capacity);
			T--;
		}
	}
	public static boolean optimize(int [] arr, int n, int mid, int D){
		int days = 1;
		int sum = 0;
		for (int x: arr) {
			if ((sum + x) <= mid) sum += x;
			else {
				sum = x;
				days++;
			} 
		}
		if (days <= D) return true;
		return false;
	}
}



